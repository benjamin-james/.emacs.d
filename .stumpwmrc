;; -*- lisp -*-
(in-package :stumpwm)

(defun load-file (file)
  (load (concatenate 'string "~/.config/stumpwm/" file ".lisp")))

(load-file "swank")

(define-key *root-map* (kbd "C-e") "emacs")

(defcommand firefox() ()
	"Start firefox"
	(run-or-raise "firefox"
	'(:title "firefox-primary")))
(define-key *root-map* (kbd "C-f") "firefox")

(defcommand urxvt() ()
	    "Start uxrvt"
	    (run-or-raise "urxvtc"
			  '(:title "urxvt-primary")))
(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec xbacklight -inc 5")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec xbacklight -dec 5")
(define-key *top-map* (kbd "Print") "exec scrot -e 'mv $f $HOME/Pictures/scrot/$f'")

(defcommand increase-volume () ()
  "Increase the volume"
  (run-shell-command "amixer sset PCM 5+ unmute"))

(defcommand decrease-volume () ()
  "Decrease the volume"
  (run-shell-command "amixer sset PCM 5- unmute"))

(defcommand mute () ()
  "Mute the volume"
  (run-shell-command "amixer sset PCM mute"))
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "increase-volume")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "decrease-volume")
(define-key *top-map* (kbd "XF86AudioMute") "mute-volume")

(define-key *root-map* (kbd "C-c") "urxvt")
(define-key *root-map* (kbd "c") "urxvt")

(define-key *root-map* (kbd "C-d")
  "exec dmenu_run -i -b -p \"run command:\"")

(define-key *root-map* (kbd "C-s") "swank")


;; look and feel
(stumpwm:set-fg-color "white")
(stumpwm:set-bg-color "black")
(set-bg-color "grey20")
(set-border-color "grey10")
(set-unfocus-color "grey10")

(setf *startup-message* nil)

(setf *maxsize-border-width* 3)
(setf *normal-border-width* 3)
(setf *window-border-style* :thin)
(set-msg-border-width 1)
(set-frame-outline-width 1)

(set-normal-gravity :center)


;; A nifty little recursive window shifter
(defun shift-windows-forward (frames window)
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
			     (frame-window frame))
      (when window
	(pull-window window frame)))))

(defcommand rotate-windows () ()
  "Rotate windows"
  (let* ((frames (group-frames (current-group)))
	 (window (frame-window (car (last frames)))))
    (shift-windows-forward frames window)))

(define-key *root-map* (kbd "C-a") "rotate-windows")

(stumpwm:toggle-mode-line (stumpwm:current-screen)
 (stumpwm:current-head))
(if (not (head-mode-line (current-head)))
   (toggle-mode-line (current-screen) (current-head)))
